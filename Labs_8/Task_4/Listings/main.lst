C51 COMPILER V9.59.0.0   MAIN                                                              12/13/2018 07:17:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2           * @author Krzysztof Stezala
   3           * @date 2018-12-11
   4           * @version 1.0
   5           * @brief Triangular wave
   6           */
   7           
   8           #include "aduc831.h"
   9           #include "timers.h"
  10           #include "bitop.h"
  11           #include "definitions.h"
  12           
  13            /*
  14            * Global variables
  15            */
  16          sig_params_t wave_params;       // to store parameters of the signal
  17          float32_t sample_voltage=0.0;   // sample voltage to be put on DAC
  18          sample_t sample = {0};          // final  value for DAC registers is stored here
  19          
  20          /**
  21           * voltage_calc() calculates the current state of the voltage of the signal
  22           */
  23          float32_t voltage_calc(float t, float period, float rise, float timeon, float wave_amplitude, float offset
             -)
  24          {
  25   1        float32_t voltage;
  26   1        
  27   1        if(t<rise)  //if we are in 'rise part' of a period
  28   1        {
  29   2          voltage = ((wave_amplitude/rise)*t)+offset;
  30   2        }
  31   1        else if(t>=(rise+timeon)) //if we are in 'fall part' of a period
  32   1        {
  33   2          voltage = wave_amplitude-(wave_amplitude/(period-(rise+timeon)))*(t-rise-timeon)+offset;
  34   2        }
  35   1        
  36   1        return voltage;
  37   1      } 
  38          
  39          void timer_1_interrupt() interrupt 3
  40          {
  41   1        T1_set_time(GENERATOR_SAMPLING_TIME);
  42   1        // adding a frection to 
  43   1        wave_params.t+=wave_params.delta_t;
  44   1        if(wave_params.t>=wave_params.period)
  45   1        {
  46   2          wave_params.t=wave_params.delta_t;
  47   2        }
  48   1        //Determine sample
  49   1        sample_voltage=voltage_calc(wave_params.t,wave_params.period,wave_params.rise_edge,wave_params.time_on,wa
             -ve_params.amplitude,wave_params.offset);
  50   1        
  51   1        //Signal restrictions//sample_voltage=(sample_voltage>DA_Vref)? DA_Vref: sample_voltage; //The expression
             - a ? b : c returns b if a is true, otherwise it returns c.//sample_voltage=(sample_voltage<0)? 0 : sample_voltage;
C51 COMPILER V9.59.0.0   MAIN                                                              12/13/2018 07:17:06 PAGE 2   

  52   1        //Keep the signal in bounds
  53   1        if(sample_voltage>DA_Vref)
  54   1        {
  55   2          sample_voltage = DA_Vref;
  56   2        }
  57   1        else
  58   1        {
  59   2          sample_voltage = sample_voltage;
  60   2        } 
  61   1        if(sample_voltage<0)
  62   1        {
  63   2          sample_voltage = 0;
  64   2        }
  65   1        else
  66   1        {
  67   2          sample_voltage = sample_voltage;
  68   2        }
  69   1        // Register conversion
  70   1        // takes the relative value for integer in the union
  71   1        sample.value=(unsigned int)(sample_voltage/DA_Vref*(float)DA_MAX_VALUE); 
  72   1        // from the same union takes the respective bytes for DAC registers
  73   1        DAC0H = sample.word.high_byte;
  74   1        DAC0L = sample.word.low_byte;
  75   1      }
  76          
  77          void main(void)
  78          {
  79   1        // setting DACCON register for both DAC0 and DAC1
  80   1        DACCON = (DAC_MODE_12|DAC_RNG1_ON|DAC_RNG0_ON|DAC_CLR1_ON|DAC_CLR0_ON|DAC_SYNC_ON|DAC_POWER1_ON|DAC_POWER
             -0_ON);
  81   1        
  82   1        ET1=1;  //allow T1 interrupts
  83   1        EA=1;   //allow interrupts
  84   1        
  85   1        //timer config
  86   1        TMOD = (T1_MODE_GATE_ON|T1_MODE_OPERATIONAL_TIMER|T1_MODE_16B); //16b timer
  87   1        
  88   1        //saw-tooth parameters
  89   1        wave_params.period = 5.0;
  90   1        wave_params.amplitude = 5;          // wave_amplitude
  91   1        wave_params.rise_edge = 2.5;        // czas narastania
  92   1        wave_params.time_on = 0.0;          
  93   1        wave_params.offset = 0.0;
  94   1        wave_params.t = 0.0;
  95   1        wave_params.delta_t = (((float32_t)GENERATOR_SAMPLING_TIME)/1000.0); // getting the accuracy of sawtooh w
             -ave; how big is step in y axis
  96   1        
  97   1        //start timer 1 
  98   1        TR1 = 1;
  99   1        while(1)
 100   1        {
 101   2        }
 102   1      
 103   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    666    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34      28
C51 COMPILER V9.59.0.0   MAIN                                                              12/13/2018 07:17:06 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
