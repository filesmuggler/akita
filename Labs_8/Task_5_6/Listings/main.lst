C51 COMPILER V9.59.0.0   MAIN                                                              12/11/2018 19:31:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2           * @author Krzysztof Stezala
   3           * @date 2018-12-11
   4           * @version 2.0
   5           * @brief Interface 
   6           */
   7           
   8           #include "aduc831.h"
   9           #include "timers.h"
  10           #include "bitop.h"
  11           #include "definitions.h"
  12           
  13            /*
  14            * Global variables
  15            */
  16          sig_params_t wave_params; //to store parameters
  17          float32_t sample_voltage=0.0;
  18          sample_t sample = {0};
  19          
  20          float32_t voltage_calc(float t, float period, float rise, float timeon, float ampli, float offset, bool re
             -ctangle)
  21          {
  22   1        
  23   1        float32_t voltage;
  24   1        
  25   1        if(t<rise)  //if we are in 'rise part' of a period
  26   1        {
  27   2          voltage = ((ampli/rise)*t)+offset;
  28   2        }
  29   1        else if((t>=rise) && (t < (rise+timeon))) //if we are in 'on part' of a period
  30   1        {
  31   2          voltage = ampli + offset;
  32   2        }
  33   1        
  34   1        else if(t>=(rise+timeon)) //if we are in 'fall part' of a period
  35   1        {
  36   2          if(rectangle==1) voltage = 0+offset;
  37   2          else  voltage = ampli-(ampli/(period-(rise+timeon)))*(t-rise-timeon)+offset;
  38   2        }
  39   1        
  40   1        return voltage;
  41   1      } 
  42          
  43          void timer1_handler() interrupt 3
  44          {
  45   1        //set T1
  46   1        T1_set_time(GENERATOR_SAMPLING_TIME);
  47   1        //Change time of signal
  48   1        wave_params.t+=wave_params.delta_t;
  49   1        if(wave_params.t>=wave_params.period)wave_params.t=wave_params.delta_t;
  50   1        //Determine sample
  51   1        sample_voltage=voltage_calc(wave_params.t,wave_params.period,wave_params.rise_edge,wave_params.time_on,wa
             -ve_params.amplitude,wave_params.offset,wave_params.rectangle);
  52   1        //Signal restrictions
C51 COMPILER V9.59.0.0   MAIN                                                              12/11/2018 19:31:18 PAGE 2   

  53   1        sample_voltage=(sample_voltage>DA_Vref)? DA_Vref: sample_voltage; //The expression a ? b : c returns b if
             - a is true, otherwise it returns c.
  54   1        sample_voltage=(sample_voltage<0)? 0 : sample_voltage;
  55   1        //Register conversion
  56   1        sample.value=(unsigned int)(sample_voltage/DA_Vref*(float)DA_MAX_VALUE);
  57   1        //Set converter
  58   1        DAC0H = sample.word.high_byte;
  59   1        DAC0L = sample.word.low_byte;
  60   1      }
  61          void main(){
  62   1      
  63   1        //DAC config
  64   1        DACCON=(DAC_MODE_12|DAC_RNG1_ON|DAC_RNG0_ON|DAC_CLR1_ON|DAC_CLR0_ON|DAC_SYNC_ON|DAC_POWER1_ON|DAC_POWER0_
             -ON);
  65   1        
  66   1        ET1=1;  //allow T1 interrupts
  67   1        EA=1;   //allow interrupts
  68   1        
  69   1        //timer config
  70   1        TMOD = (T1_MODE_GATE_ON|T1_MODE_OPERATIONAL_TIMER|T1_MODE_16B); //16b timer //16b timer
  71   1        
  72   1        //saw-tooth params
  73   1        wave_params.period = 6.0;
  74   1        wave_params.amplitude = 3.5;
  75   1        wave_params.rise_edge = 2.5;
  76   1        wave_params.time_on = 4.0;
  77   1        wave_params.offset = 2.0;
  78   1        wave_params.rectangle = 1;
  79   1        wave_params.t = 0.0;
  80   1        wave_params.delta_t = (((float32_t)GENERATOR_SAMPLING_TIME)/1000.0);
  81   1      
  82   1        TR1 = 1;
  83   1        while(1)
  84   1        {
  85   2        }
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    756    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
