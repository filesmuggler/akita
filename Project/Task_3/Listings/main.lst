C51 COMPILER V9.59.0.0   MAIN                                                              01/13/2019 03:26:44 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2           * @author Krzysztof Stezala
   3           * @date 2019-01-12
   4           * @version 1.0
   5           * @brief UART communication with third-party app
   6           */
   7           
   8           
   9           /**
  10            * UART set into Mode 1 (8-bit, Variable Baud Rate)
  11            *
  12            *
  13            */
  14          #include "aduc831.h"
  15          #include "timers.h"
  16          #include "definitions.h"
  17          
  18          char buffer[25];
  19          char uart_buffer[25];
  20          int local_index;
  21          
  22          char message_index;
  23          
  24          int frequency_1;
  25          char frequency_1_t[8];
  26          int duty_cycle_1;                                       // after processing
  27          char duty_cycle_1_t[2];                                 // before processing
  28          
  29          
  30          int frequency_2;
  31          char frequency_2_t[8];
  32          int duty_cycle_2;
  33          char duty_cycle_2_t[2];
  34          
  35          int operation_mode;
  36          
  37          bool new_data = FALSE;
  38          bool mode_data = FALSE;
  39          bool duty_cycle_data = FALSE;
  40          bool freq_data = FALSE;
  41          bool two_channel = FALSE;
  42          bool is_read = TRUE;
  43          
  44          void receiveMessage() interrupt 4
  45          {
  46   1        /**
  47   1        * Receiving transmission
  48   1        */
  49   1        char received = 0;
  50   1        if(RI==1){
  51   2          received = (char)SBUF;
  52   2          RI = 0;
  53   2          //SBUF = received;
  54   2          buffer[message_index] = received;
C51 COMPILER V9.59.0.0   MAIN                                                              01/13/2019 03:26:44 PAGE 2   

  55   2          message_index = message_index + 1;
  56   2        }
  57   1        if(TI==1){
  58   2          TI = 0;
  59   2        }
  60   1        
  61   1        if(received == 'E')
  62   1        {
  63   2          is_read = FALSE;
  64   2          message_index = 0;
  65   2          return;
  66   2        }
  67   1        else
  68   1        {
  69   2          is_read = TRUE;
  70   2        }
  71   1        /*
  72   1        if(message_index > 25)
  73   1        {
  74   1          message_index = 0;
  75   1        }*/
  76   1        
  77   1        return;
  78   1      }
  79          
  80          
  81          
  82          void main()
  83          {
  84   1        ES = 1;
  85   1        EA = 1;
  86   1        
  87   1        SM0 = 0;
  88   1        SM1 = 1;
  89   1        SM2 = 0;
  90   1        REN = 1;
  91   1        
  92   1        TMOD = T1_MODE_8B_AUTORELOAD;
  93   1        
  94   1        TH1 = T1_9600_11;
  95   1        
  96   1        TR1 = 1;
  97   1        
  98   1        message_index = 0;
  99   1        local_index = 0;
 100   1        
 101   1        
 102   1        while(1)
 103   1        {
 104   2          
 105   2          while(buffer[local_index]!='E' && !is_read)
 106   2          {
 107   3            if(buffer[local_index]=='S')
 108   3            {
 109   4              new_data = TRUE;
 110   4          
 111   4              mode_data = TRUE;
 112   4              freq_data = FALSE;
 113   4              duty_cycle_data = FALSE;
 114   4          
 115   4              local_index = local_index + 1;
 116   4              continue;
C51 COMPILER V9.59.0.0   MAIN                                                              01/13/2019 03:26:44 PAGE 3   

 117   4            }
 118   3            else if(buffer[local_index] == 'D')
 119   3            {
 120   4              mode_data = FALSE;
 121   4              duty_cycle_data = TRUE;
 122   4              freq_data = FALSE;    
 123   4          
 124   4              local_index = local_index + 1;
 125   4              continue;
 126   4            }
 127   3            else if(buffer[local_index] == 'F')
 128   3            {
 129   4              mode_data = FALSE;
 130   4              duty_cycle_data = FALSE;
 131   4              freq_data = TRUE;
 132   4              
 133   4              local_index = local_index + 1;
 134   4              continue;
 135   4            }
 136   3        
 137   3            /**
 138   3            * Incoming data analysis
 139   3            */
 140   3            if(new_data)
 141   3            {
 142   4              if(mode_data)
 143   4              {
 144   5                operation_mode = buffer[local_index];
 145   5                if(operation_mode == 49)
 146   5                {
 147   6                  two_channel = FALSE;
 148   6                }
 149   5                else
 150   5                {
 151   6                  two_channel = TRUE;
 152   6                }
 153   5              }
 154   4            }
 155   3          
 156   3            if(duty_cycle_data)
 157   3            {
 158   4              if(!two_channel)
 159   4              {
 160   5                // for single channel
 161   5                duty_cycle_1_t[local_index - 3] = buffer[local_index];
 162   5              } 
 163   4              else
 164   4              {
 165   5                // for double channel
 166   5                if(local_index < 5)
 167   5                {
 168   6                  duty_cycle_1_t[local_index - 3] = buffer[local_index];
 169   6                }
 170   5                else
 171   5                {
 172   6                  duty_cycle_2_t[local_index - 5] = buffer[local_index];
 173   6                }
 174   5              }
 175   4            }
 176   3          
 177   3            if(freq_data)
 178   3            { 
C51 COMPILER V9.59.0.0   MAIN                                                              01/13/2019 03:26:44 PAGE 4   

 179   4              if(!two_channel)
 180   4              {
 181   5                // for single channel
 182   5                frequency_1_t[local_index - 6] = buffer[local_index];
 183   5              }
 184   4              else
 185   4              {
 186   5                // for double channel
 187   5                if(local_index < 16)
 188   5                {
 189   6                  frequency_1_t[local_index - 8] = buffer[local_index];
 190   6                }
 191   5                else
 192   5                {
 193   6                  frequency_2_t[local_index - 16] = buffer[local_index];
 194   6                }
 195   5              }
 196   4            }
 197   3            local_index = local_index + 1;
 198   3          }
 199   2          if(buffer[local_index]=='E')
 200   2          {
 201   3            is_read = TRUE;
 202   3            local_index = 0;
 203   3          }
 204   2          
 205   2          
 206   2        }
 207   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    349    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     89    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
